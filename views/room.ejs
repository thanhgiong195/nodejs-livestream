<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <script>
      const ROOM_ID = '<%= roomId %>';
    </script>
    <script src="https://unpkg.com/peerjs@1.4.5/dist/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.5.0/socket.io.js"></script>
    <script>
      const socket = io();
      const videoGrid = document.getElementById('video-grid');
      const myPeer = new Peer();
      const myVideo = document.createElement('video');
      myVideo.muted = true;
      const peers = {};
      navigator.mediaDevices
        .getUserMedia({
          video: true,
          audio: true,
        })
        .then(stream => {
          addVideoStream(myVideo, stream);
          console.log('stream');
          myPeer.on('call', call => {
            console.log('stream call');
            peers[call.peer] = call;
            call.answer(stream);
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
              addVideoStream(video, userVideoStream);
            });

            call.on('close', () => {
              video.remove();
            });
          });

          socket.on('user-connected', userId => {
            console.log('user-connected');
            connectToNewUser(userId, stream);
          });
        })
        .catch(function (err) {
          myPeer.on('call', call => {
            console.log('stream call');
            peers[call.peer] = call;

            call.on('close', () => {
              video.remove();
            });
          });
          console.log('err', err);
          /* handle the error */
        });

      // client-side
      socket.on('connect', () => {
        console.log('socket.id', socket.id); // ojIckSD2jqNzOqIrAGzL
      });

      socket.on('user-disconnected', userId => {
        console.log('user-disconnected', userId);
        if (peers[userId]) peers[userId].close();
      });

      myPeer.on('open', id => {
        console.log('open', ROOM_ID, id);
        socket.emit('join-room', ROOM_ID, id);
      });

      function connectToNewUser(userId, stream) {
        const call = myPeer.call(userId, stream);
        const video = document.createElement('video');
        call.on('stream', userVideoStream => {
          addVideoStream(video, userVideoStream);
        });
        call.on('close', () => {
          video.remove();
        });

        peers[userId] = call;
      }

      function addVideoStream(video, stream) {
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });
        document.getElementById('video-grid').append(video);
      }
    </script>
    <title>Document</title>
    <style>
      #video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, 300px);
        grid-auto-rows: 300px;
      }

      video {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body>
    <h3>Room ID: <%= roomId %></h3>
    <div id="video-grid"></div>
  </body>
</html>
